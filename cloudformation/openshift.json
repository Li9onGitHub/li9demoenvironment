{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing ec2 KeyPair to enable SSH access",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair"
    },
    "domaintag": {
      "Description": "Unique domain tag",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "3",
      "Default": "abc",
      "AllowedPattern" : "[a-z][a-z][a-z]",
      "ConstraintDescription": "[a-z][a-z][a-z]"
    }


  },

  "Mappings" : {
        "RegionToAMI" : {
                "us-east-1": {
                        "centos": "ami-6d1c2007",
                        "ubuntu": "ami-2d39803a",
			"rhel":   "ami-2051294a"
                },
                "us-west-1": {
                        "centos": "ami-af4333cf",
                        "ubuntu": "ami-48db9d28"
                },
                "us-west-2": {
                        "centos": "ami-d2c924b2",
                        "ubuntu": "ami-d732f0b7"
                },
                "ap-south-1": {
                        "centos": "ami-95cda6fa",
                        "ubuntu": "ami-4a90fa25"
                },
                "ap-northeast-2": {
                        "centos": "ami-c74789a9",
                        "ubuntu": "ami-09dc1267"
                },
                "ap-southeast-1": {
                        "centos": "ami-eec1c380",
                        "ubuntu": "ami-21d30f42"
                },
                "ap-southeast-2": {
                        "centos": "ami-fedafc9d",
                        "ubuntu": "ami-ba3e14d9"
                },
                "ap-northeast-1": {
                        "centos": "ami-eec1c380",
                        "ubuntu": "ami-a21529cc"
                },
                "eu-central-1": {
                        "centos": "ami-9bf712f4",
                        "ubuntu": "ami-26c43149"
                },
                "eu-west-1": {
                        "centos": "ami-7abd0209",
                        "ubuntu": "ami-ed82e39e"
                },
                "sa-east-1": {
                        "centos": "ami-26b93b4a",
                        "ubuntu": "ami-dc48dcb0"
                }
         }
  },


  "Conditions" : {
  },

  "Resources": {



    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "InboundHTTPSPortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutBoundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "OutBoundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "OutBoundLDAPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "389",
          "To": "389"
        }
      }
    },
    "OutBoundLDAPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "686",
          "To": "686"
        }
      }
    },  
    "SubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },

    "CommonSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "General services",
        "SecurityGroupIngress": [
          { 
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          { 
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          { 
            "IpProtocol": "icmp",
            "FromPort": "8",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "10.0.0.0/24"
          }

        ]
      }
    },



    "etcdSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "etcd Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2379",
            "ToPort": "2379",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2380",
            "ToPort": "2380",
            "CidrIp": "10.0.0.0/24"
          }
        ]
      }
    },

    "MasterSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "OpenShift Master Security Group",
        "SecurityGroupIngress": [
          { 
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8443",
            "ToPort": "8443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8053",
            "ToPort": "8053",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "8053",
            "ToPort": "8053",
            "CidrIp": "10.0.0.0/24"
          }
        ]
      }
    },

    "NodeSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "OpenShift Node Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "10250",
            "ToPort": "10250",
            "CidrIp": "10.0.0.0/24"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4789",
            "ToPort": "4789",
            "CidrIp": "10.0.0.0/24"
          }
        ]
      }
    },

    "InfraNodeSecGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "OpenShift Infrastructure Node Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },


    "OpenShiftMaster": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m4.large",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ ".", [ "master01", { "Ref": "domaintag" }, "li9.local"  ]] }
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              { "Ref": "MasterSecGroup" },
 	      { "Ref": "etcdSecGroup" },
              { "Ref": "InfraNodeSecGroup" },
 	      { "Ref": "CommonSecGroup" }
            ],
            "AssociatePublicIpAddress": "true",
            "PrivateIpAddress": "10.0.0.11",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": { "Fn::FindInMap" : [ "RegionToAMI", { "Ref" : "AWS::Region" }, "rhel"]},
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/xvdh",
                  "Ebs" : {
                     "VolumeType" : "gp2",
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "9"
                  }
               }
        ]

      }
    },

    "OpenShiftNode01": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m4.large",
        "Tags": [
          {
            "Key": "Name",
	    "Value": { "Fn::Join": [ ".", [ "node01", { "Ref": "domaintag" }, "li9.local"  ]] }
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              { "Ref": "NodeSecGroup" },
	      {	"Ref": "CommonSecGroup" }
            ],
            "AssociatePublicIpAddress": "true",
            "PrivateIpAddress": "10.0.0.12",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": { "Fn::FindInMap" : [ "RegionToAMI", { "Ref" : "AWS::Region" }, "rhel"]},
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/xvdh",
                  "Ebs" : {
                     "VolumeType" : "gp2",
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "9"
                  }  
               }  
        ]      


      }
    },


    "OpenShiftNode02": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m4.large",
        "Tags": [
          {
            "Key": "Name",
	    "Value": { "Fn::Join": [ ".", [ "node02", { "Ref": "domaintag" }, "li9.local"  ]] }
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              { "Ref": "NodeSecGroup" },
              { "Ref": "CommonSecGroup" }
            ],
            "AssociatePublicIpAddress": "true",
            "PrivateIpAddress": "10.0.0.13",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": { "Fn::FindInMap" : [ "RegionToAMI", { "Ref" : "AWS::Region" }, "rhel"]},
        "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/xvdh",
                  "Ebs" : {
                     "VolumeType" : "gp2",
                     "DeleteOnTermination" : "true",
                     "VolumeSize" : "9"
                  }  
               }  
        ]      

      }
    },


    "DNSZone" : {
    	"Type" : "AWS::Route53::RecordSet",
    	"Properties" : {
      		"HostedZoneId" :  "ZG1LSIRFXEMSJ",
      		"Comment" : "DNS name for my temporary zone.",  
      		"Name" :  { "Fn::Join": [ ".", [ { "Ref": "domaintag" }, "demo.li9.com"  ]] },
      		"Type" : "A",
      		"TTL" : "900",
		"ResourceRecords" : [ { "Fn::GetAtt" : [ "OpenShiftMaster", "PublicIp" ] } ]
    	}
    },

    "DNSAny" : {
   	"Type" : "AWS::Route53::RecordSet",
    	"Properties" : {
      		"HostedZoneId" :  "ZG1LSIRFXEMSJ",
      		"Comment" : "DNS name for my instance.",
		"Name" :  { "Fn::Join": [ ".", [ "*", { "Ref": "domaintag" }, "demo.li9.com"  ]] },
      		"Type" : "A",
      		"TTL" : "900",
		"ResourceRecords" : [ { "Fn::GetAtt" : [ "OpenShiftMaster", "PublicIp" ] } ]

    	}
    },

    "DNSMaster" : {
        "Type" : "AWS::Route53::RecordSet",
        "Properties" : {
                "HostedZoneId" :  "ZG1LSIRFXEMSJ",
                "Comment" : "DNS name for my instance.",
		"Name" :  { "Fn::Join": [ ".", [ "master01", { "Ref": "domaintag" }, "demo.li9.com"  ]] },
                "Type" : "A",
                "TTL" : "900",
		"ResourceRecords" : [ { "Fn::GetAtt" : [ "OpenShiftMaster", "PublicIp" ] } ]
        }
    }



  },
  "Outputs": {
    "Master": {
      "Description": "master01",
      "Value": {
        "Fn::GetAtt": [
          "OpenShiftMaster",
          "PublicIp"
        ]
      }
    },
    "Node01": {
      "Description": "node01",
      "Value": {
        "Fn::GetAtt": [
          "OpenShiftNode01",
          "PublicIp"
        ]
      }
    },
    "Node02": {
      "Description": "node02",
      "Value": {
        "Fn::GetAtt": [
          "OpenShiftNode02",
          "PublicIp"
        ]
      }
    }




  }
}

